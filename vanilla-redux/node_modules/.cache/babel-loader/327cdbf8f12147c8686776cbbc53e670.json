{"ast":null,"code":"// library\nimport { createStore } from 'redux'; // store는 date를 넣는 곳(state), 기본적으로 data를 넣을 수 있는 장소를 생성한다.\n// state -> application에서 바뀌는 data\n\nconst add = document.getElementById('add');\nconst minus = document.getElementById('minus');\nconst number = document.querySelector('span'); // reducer\n// reducer는 함수고 data를 수정(modify)한다.\n\nconst countModifier = (count = 0, action) => {\n  if (action.type === 'ADD') {\n    return count + 1;\n  } else if (action.type === 'MINUS') {\n    return count - 1;\n  } else {\n    return count;\n  }\n}; // store 생성\n// store -> data를 저장하는 곳\n\n\nconst countStore = createStore(countModifier); // countModifier에 action 보내는 방법\n// 1. dispatch\n\ncountStore.dispatch({\n  type: 'ADD'\n});\ncountStore.dispatch({\n  type: 'ADD'\n});\ncountStore.dispatch({\n  type: 'ADD'\n});\ncountStore.dispatch({\n  type: 'ADD'\n});\ncountStore.dispatch({\n  type: 'ADD'\n});\ncountStore.dispatch({\n  type: 'MINUS'\n});\nconsole.log(countStore.getState());","map":{"version":3,"sources":["/Users/leesunmin/react_prac/vanilla-redux/src/index.js"],"names":["createStore","add","document","getElementById","minus","number","querySelector","countModifier","count","action","type","countStore","dispatch","console","log","getState"],"mappings":"AAAA;AACA,SAASA,WAAT,QAA4B,OAA5B,C,CACA;AACA;;AAEA,MAAMC,GAAG,GAAGC,QAAQ,CAACC,cAAT,CAAwB,KAAxB,CAAZ;AACA,MAAMC,KAAK,GAAGF,QAAQ,CAACC,cAAT,CAAwB,OAAxB,CAAd;AACA,MAAME,MAAM,GAAGH,QAAQ,CAACI,aAAT,CAAuB,MAAvB,CAAf,C,CAEA;AACA;;AACA,MAAMC,aAAa,GAAG,CAACC,KAAK,GAAG,CAAT,EAAYC,MAAZ,KAAuB;AAC3C,MAAIA,MAAM,CAACC,IAAP,KAAgB,KAApB,EAA2B;AACzB,WAAOF,KAAK,GAAG,CAAf;AACD,GAFD,MAEO,IAAIC,MAAM,CAACC,IAAP,KAAgB,OAApB,EAA6B;AAClC,WAAOF,KAAK,GAAG,CAAf;AACD,GAFM,MAEA;AACL,WAAOA,KAAP;AACD;AACF,CARD,C,CAUA;AACA;;;AACA,MAAMG,UAAU,GAAGX,WAAW,CAACO,aAAD,CAA9B,C,CAEA;AACA;;AACAI,UAAU,CAACC,QAAX,CAAoB;AAAEF,EAAAA,IAAI,EAAE;AAAR,CAApB;AACAC,UAAU,CAACC,QAAX,CAAoB;AAAEF,EAAAA,IAAI,EAAE;AAAR,CAApB;AACAC,UAAU,CAACC,QAAX,CAAoB;AAAEF,EAAAA,IAAI,EAAE;AAAR,CAApB;AACAC,UAAU,CAACC,QAAX,CAAoB;AAAEF,EAAAA,IAAI,EAAE;AAAR,CAApB;AACAC,UAAU,CAACC,QAAX,CAAoB;AAAEF,EAAAA,IAAI,EAAE;AAAR,CAApB;AACAC,UAAU,CAACC,QAAX,CAAoB;AAAEF,EAAAA,IAAI,EAAE;AAAR,CAApB;AAEAG,OAAO,CAACC,GAAR,CAAYH,UAAU,CAACI,QAAX,EAAZ","sourcesContent":["// library\nimport { createStore } from 'redux';\n// store는 date를 넣는 곳(state), 기본적으로 data를 넣을 수 있는 장소를 생성한다.\n// state -> application에서 바뀌는 data\n\nconst add = document.getElementById('add');\nconst minus = document.getElementById('minus');\nconst number = document.querySelector('span');\n\n// reducer\n// reducer는 함수고 data를 수정(modify)한다.\nconst countModifier = (count = 0, action) => {\n  if (action.type === 'ADD') {\n    return count + 1;\n  } else if (action.type === 'MINUS') {\n    return count - 1;\n  } else {\n    return count;\n  }\n};\n\n// store 생성\n// store -> data를 저장하는 곳\nconst countStore = createStore(countModifier);\n\n// countModifier에 action 보내는 방법\n// 1. dispatch\ncountStore.dispatch({ type: 'ADD' });\ncountStore.dispatch({ type: 'ADD' });\ncountStore.dispatch({ type: 'ADD' });\ncountStore.dispatch({ type: 'ADD' });\ncountStore.dispatch({ type: 'ADD' });\ncountStore.dispatch({ type: 'MINUS' });\n\nconsole.log(countStore.getState());\n"]},"metadata":{},"sourceType":"module"}