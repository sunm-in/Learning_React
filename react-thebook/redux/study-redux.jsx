// 🔍 action
// 상태에 어떠한 변화가 필요하면 액션(action)이란 것이 발생한다.
{
  type: 'TOGGLE_VALUE';
}

// 액션 객체는 type 필드를 반드시 가지고 있어야 한다. 이 값을 액션의 이름이라고 생각하면 된다.
{
  type: 'ADD_TODO';
  data: {
    id: 1;
    text: '리덕스 배우기';
  }
}
{
  type: 'CHANGE_INPUT';
  text: '안녕하세요';
}

// 🔍 액션 생성 함수(action creator)는 객체를 만들어 주는 함수
{
  function addTodo(data) {
    return {
      type: 'ADD_TODO',
      data,
    };
  }

  // 화살표 함수로 만들기
  const changeInput = (text) => ({
    type: 'CHANGE_INPUT',
    text,
  });

  /**
   * 어떤 변화를 일으켜야 할 때마다 액션 객체를 만들어야 하는데 매번 액션 객체를 직접 작성하기 번거로울 수 있고,
   * 만드는 과정에서 실수로 정보를 놓칠 수도 있다. 이러한 일을 방지하기 위해 함수로 만들어서 관리한다.
   */
}

// 🔍 리듀셔(reducer)는 변화를 일으키는 함수이다. 액션을 만들어서 발생시키면 리듀서가 현재 상태와 전달받은 액션 객체를 파라미터로 받아 온다.
// 그리고 두 값을 새로운 상태를 만들어서 반환해준다.
{
  const initialState = {
    counter: 1,
  };

  function reducer(state = initialState, action) {
    switch (action.type) {
      case INCREMENT:
        return {
          counter: state.counter + 1,
        };
      default:
        return state;
    }
  }
}

// 🔍 스토어, 프로젝트에 리덕스를 적용하기 위해 스토어(store)를 만든다. 한 개의 프로젝트는 단 하나의 스토어만 가질 수 있다.

// 🔍 디스패치(dispatch)는 스토어의 내장 함수 중 하나, 디스패치는 '액션을 발생시키는 것'이라고 이해하면 된다.
// 이 함수는 dispatch(action)과 같은 형태로 액션 객체를 파라미터로 넣어서 호출한다.
// 이 함수가 호출되면 스토어는 리듀서 함수를 실행시켜서 새로운 상태를 만들어 준다.

// ✅ 리덕스의 세 가지 규칙
/**
 * 1. 단일 스토어
 * 하나의 애플리케이션 안에는 하나의 스토어가 있다.
 * 여러 개의 스토어를 사용하는 것이 완전히 불가능하지는 않지만, 상태 관리가 복잡해질 수 있으므로 권장하지 않는다.
 *
 * 2. 읽기 전용 상태
 * 리덕스 상태는 읽기 전용이다. 상태를 업데이트할 때 기존의 객체는 건드리지 않고 새로운 객체를 생성해 주어야 한다.
 * 리덕스에서 불변성을 유지해야 하는 이유는 내부적으로 데이터가 변경되는 것을 감지하기 위해 얕은 비교 검사를 하기 때문이다.
 *
 * 3. 리듀서는 순수한 함수
 * 변화를 일으키는 리듀서 함수는 순수한 함수여야 한다.
 * - 리듀서 함수는 이전 상태와 액션 객체를 파라미터로 받는다.
 * - 파라미터 외의 값에는 의존하면 안된다.
 * - 이전 상태는 절대로 건드리지 않고, 변화를 준 새로운 상태 객체를 만들어서 반환한다.
 * - 똑같은 파라미터로 호출된 리듀서 함수는 언제나 똑같은 결과 값을 반환해야 한다.
 */
